import smtplib
from datetime import datetime
from urllib.request import urlopen
from bs4 import BeautifulSoup


class Scraper:
    #Constructor method for PriceTracker
    #Arguments are user-entered the product link and their email
    #self.price is array that stores prices
    #self.time is array that stores time of recording for each price
    #self.table combines the two into a 2d array
    def __init__(self, link, email):
        self.price = []
        self.time = []
        self.table = [[0 for x in range(2)] for y in range(0)]
        self.table.append(["Time", "Price"])
        self.title = None
        self.link = link
        self.email = email

    #Populate function web scrapes to update the table and attributes of Scraper object
    def populate(self):
        page = urlopen(self.link)
        html_bytes = page.read()
        html = html_bytes.decode("utf8")
        #Use BeautifulSoup to get html file
        soup = BeautifulSoup(html, "html.parser")

        #Store the last recorded price to see if there are any changes
        lastPrice = self.table[len(self.table) - 1][1]

        #Record time of recorded price
        time = datetime.now().strftime("%m/%d/%Y, %H:%M:%S")
        #use beautiful soup to find the most recent price on amazon
        newPrice = soup.find('span', {
            'class': 'a-offscreen'}).text.strip()

        #Add both to the 2d array
        self.table.append([time, newPrice])

        #Get the product name from amazon.com
        self.title = soup.find('h1', {'id': 'title'}).text.strip()

        #if the price changed, send an email alert
        if (lastPrice != newPrice and lastPrice != "Price"):
            self.sendMail(lastPrice, newPrice)

    #The following two functions are getter functions
    def getTable(self):
        self.populate()
        return self.table

    def getTitle(self):
        return self.title

    #This function uses the smtp library to send email alerts
    def sendMail(self, oldPrice, newPrice):
        #Setup server and port
        server = smtplib.SMTP_SSL("smtp.gmail.com", 465)
        #Log in using temporary credentials generated by Google to bot email
        server.login("pricealerts611@gmail.com", "atju krdm dwwl mqsf")
        server.sendmail("pricealerts611@gmail.com", self.email,
                        "The price of " + self.title +" has changed from " + str(oldPrice) + " to " + str(newPrice))
